연산자


할당 연산자
-일반 할당( = ) : x=y 꼴에서 y를 x에 할당한다.
-더하기 복합 대입 연산 ( += ) : x += y 꼴에서 x와 y를 더한 값을 x에 재할당한다.
-빼기 복합 대입 연산 ( -= ) : x -= y 꼴에서 x에서 y를 뺀 값을 x에 재할당한다.
-곱하기 복합 대입 연산 ( *= ) : x *= y 꼴에서 x와 y를 곱한 값을 x에 재할당한다.
-나누기 복합 대입 연산 ( /= ) : x /= y 꼴에서 x를 y로 나눈 몫을 x에 재할당한다.
-나머지 복합 대입 연산 ( %= ) : x %= y 꼴에서 x를 y로 나눈 나머지를 x에 재할당한다.
-거듭 제곱 복합 대입 연산 ( **= ) : x **= y 꼴에서 x의 y제곱을 x에 재할당한다.
-논리 AND 복합 대입 연산 ( &&= ) : x &&= y 꼴에서 x와 y가 모두 참인가의 여부를 x에 재할당한다.
-논리 OR 복합 대입 연산 ( ||= ) : x ||= y 꼴에서 x와 y중 하나가 참인가의 여부를 x에 재할당한다.
-널리쉬 병합 복합 대입 연산 ( ??= ) : x ??= y 꼴에서 x가 널리쉬인 경우 y값을, 아니라면 x값을 재할당한다.

비교 연산자
-동등 ( == ) : x == y꼴에서 x와 y의 값이 같은가의 여부이다. 단, 다른 타입의 피연산자간의 비교를 시도한다.
-부등 ( != ) : x != y꼴에서 x와 y의 값이 다른가의 여부이다. 단, 다른 타입의 피연산자간의 비교를 시도한다.
-일치 ( === ) : x === y꼴에서 x와 y의 값과 타입이 같은가의 여부이다.
-불일치 ( !== ) : x !== y꼴에서 x와 y의 값 혹은 타입중 하나 혹은 모두가 다른가의 여부이다.
-초과 ( > ) : x > y꼴에서 x가 y보다 큰가의 여부이다.
-미만 ( < ) : x < y꼴에서 x가 y보다 작은가의 여부이다.
-이상 ( >= ) : x >= y꼴에서 x가 y보다 큰거나 같은가의 여부이다.
-이하 ( <= ) : x <= y꼴에서 x가 y보다 작거나 같은가의 여부이다.

산술 연산자
-더하기( + ) : x + y꼴에서 x와 y의 합이다. 단, 피연산자중 하나 이상이 문자열일 경우 문자열 합치기를 수행한다.
-빼기 ( - ) : x - y꼴에서 x에서 y를 뺀 값이다.
-곱하기 ( * ) : x * y꼴에서 x와 y의 곱이다.
-나누기 ( / ) : x / y꼴에서 x를 y로 나눈 몫이다. 단, y가 0일 경우 결과는 무한(Infinity 혹은 -Infinity)이다.
-나머지( % ) : x % y꼴에서 x를 y로 나눈 나머지이다. 단 y가 0일 경우 NaN(Not a Number)이다.
-거듭제곱( ** ) : x ** y꼴에서 x의 y제곱(xⁿ)이다.
-단항 양수( + ) : +x꼴에서 변수 x의 부호를 강조하거나, x의 타입이 number가 아닐때 number로의 형변환을 시도하게 한다.
-단항 음수( - ) : -x꼴에서 변수 x의 부호를 반전하거나, x의 타입이 number가 아닐때 number로의 형변환을 시도하게 한다.
-증가( ++ )
	*전위 증가 : ++x 꼴에서 구문 실행 전 x에 1을 더한다.
	*후위 증가 :  x++ 꼴에서 구문 실행 후 x에 1을 더한다.
-감소( -- )
	*전위 감소 :  --x 꼴에서 구문 실행 전 x에서 1을 뺀다.
	*후위 감소 : x-- 꼴에서 구문 실행 후 x에서 1을 뺀다.

논리 연산자
-논리 AND ( && ) : x && y 꼴에서 x와 y가 모두 true인가의 여부이다.
-논리 OR ( || ) : x || y 꼴에서 조건 x와 y중 하나가 true인가의 여부이다.
-논리 NOT, 부정 ( ! ) : !x 꼴에서 x의 논리를 부정(반전)한다.

삼항 연산자
-삼항 연산자 ( ? : ): c ? t : f 꼴에서 조건 c가 true이라면 t, false라면 f가 된다.

기타 연산자
-멤버 접근 ( . ) : x.y 꼴에서 x의 멤버인 y에 접근하기 위해 사용한다.
-배열 인자 접근 ( [ ] ) : x[y]꼴에서 배열인 x의 인자 중 순번이 y인 인자에 접근하기 위해 사용한다.
-오브젝트 속성 접근( [ ] ) : x[y]꼴에서 오브젝트인 x의 쌍 중 키가 y인 쌍에 접근하기 위해 사용한다.
-객체화 ( new ) : new T 꼴에서 타입 T를 객체화하기 위해 사용한다.
-함수 호출( ( ) ) : f( )꼴에서 함수 f를 호출하기 위해 사용한다.
-우선 연산 ( ( ) ) : (x)꼴에서 연산 x를 우선하기 위해 사용한다.
-delete : delete x.y꼴에서 오브젝트 x의 속성인 y를 삭제하기 위해 사용한다.
-instanceof : x instanceof T 꼴에서 객체 x가 타입 T 이거나 상속, 구현 대상인가의 여부이다.
-typeof : typeof x 꼴에서 x의 타입인 문자열이다.
-옵셔널 체이닝 멤버 접근 연산자( ?. ) : x ?. y 꼴에서 x의 멤버인 y에 접근할때 x가 널리쉬라면, 오류를 발생시키는 대신, 전체 결과를 undefined로 갈음한다.
-널리쉬 병합 연산자( ?? ) : x ?? y 꼴에서 x의 값이 널리쉬일때 y값을 대신 사용하고, 그렇지 않으면 x를 그대로 사용한다.

------------------------------------------------------------------------------

연산자의 우선순위
-연산자 사이에는 연산되는 우선순위가 있으며 아래는 숫자가 작을수록 우선순위가 높다는 의미이다. (1번이 가장 높은 우선순위)

1. 우선연산( ( ) )
2. 멤버 접근, 옵셔널 체이닝 멤버 접근,  배열 인자 접근, 오브젝트 속성 접근 ( . , . , [ ] , [ ] )
3. 객체화, 함수 호출 ( new, ( ) )
4. 후위 증가, 후위 감소 ( ++, -- )
5. 전위 증가, 전위 감소, 논리 NOT, 단항 양수, 단항 음수, typeof, delete ( ++, --, !, +, - )
6. 거듭제곱( ** )
7. 곱하기, 나누기, 나머지( *, /, % )
8. 더하기, 빼기 ( +, - )
9. 초과, 미만, 이상, 이하, instanceof ( >, <, >=, <= )
10. 동등, 부등, 일치, 불일치 ( ==, !=, ===, !== )
11. 논리 AND ( && )
12. 논리 OR ( || )
13. 널리쉬 병합 연산 ( ?? )
14. 삼항 연산 ( ? : )
15. 일반 할당, 복합 대입 연산( =, +=, -=, *=, /=, %=, **=, &&=, ||=, ??= 등 )
