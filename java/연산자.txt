연산자

할당 연산자
-일반 할당 (=) : x = y 꼴에서 x에 y를 할당한다.
-더하기 복합 대입 연산 (+=) : x += y 꼴에서 x와 y를 더한 값을 x에 재할당한다.
- 빼기 복합 대입 연산 (-=) :  x -= y 꼴에서 x에서 y를 뺀 값을 x에 재할당 한다.
- 곱하기 복합 대입 연산 (*=) :  x *= y 꼴에서 x와 y를 곲한 값을 x에 재할당 한다.
- 나누기 복합 대입 연산 (/=) :  x /= y 꼴에서 x를 y로 나눈 몫을 x에 재할당 한다.
- 나머지 복합 대입 연산 (%=) :  x %= y 꼴에서 x를 y로 나눈 나머지를 x에 재할당 한다.

비교 연산자
-비교 연산자에 사용되는 피연산자의 타입은 같거나 묵시적 형변환이 가능한 관계여야 한다.
-동등 (==) : x == y꼴에서 x와 y가 가진 스텍 값이 같은가의 여부
-부등 (!=) : x != y꼴에서 x와 y가 가진 스텍 값이 다른가의 여부
-초과 (>) : x > y꼴에서 x가 y보다 큰가의 여부
-미만 (<) : x < y꼴에서 x가 y보다 작은가의 여부
-이상 (>=) : x >= y꼴에서 x가 y보다 같거나 큰가의 여부
-이하 (>=) : x <= y꼴에서 x가 y보다 같거나 작은가의 여부

산술 연산자
-더하기 (+) : x + y 꼴에서 x와 y의 합
-빼기 (-) : x - y 꼴에서 x에서 y를 뺀 값
-곱하기 (*) : x * y 꼴에서 x와 y의 곱
-나누기 (/) : x / y 꼴에서 x를 y로 나눈 값
-나머지 (%) : x % y 꼴에서 x를 y로 나눈 나머지
-단항 양수 (+)  : +x 꼴에서 변수 x의 부호를 강조
-단항 음수 (-) : -x 꼴에서 변수 x의 부호를 강조
-중가 (++)
	*전위 증가 : ++x 꼴에서 구문 실행 전 x에 1을 더한다.
	*후위 증가 : x++ 꼴에서 구문 실행 후 x에 1을 더한다.
-감소 (--)
	*전위 감소 : --x 꼴에서 구문 실행 전 x에서 1을 뺀다.
	*후위 감소 : x-- 꼴에서 구문 실행 후 x에서 1을 뺀다.
-자바가 가지는 숫자 타입간의 사칙 연산 결과는 두 피연산자의 타입이 같다면 반드시 동일 타입으로, 다르다면 보다 큰 타입으로 연산된다.
-단, 시칙연산의 두 피연산자가 int이하의 정수 타입일 경우 그 결과는 int
	   *단, int미만인 두 피연산자의 사칙연산 결과를 int 미만인 타입의 변수에 할당코자 할때 두 피연산자가 상수(final)이고, 그 결과가 해당 타입의 한계값의 범위내에 있다면 할당가능 합 대입 연산자를 사용할 경우 묵시적 형변환이 발생

논리 연산자
-논리 AND (&&) : x && y 꼴에서 x와 y가 모두 true 인가의 여부
-논리 OR (||) :  x || y 꼴에서 x와 y중 하나가 true 인가의 여부
-논리 NOT (!) :   !x 꼴에서 x의 논리를 부정(반전)한다.

삼항 연산자
-삼항 연산자(? : ) : c ? t : f 꼴에서 조건 c가 true라면 t, false라면 f가 된다.

기타 연산자
-멤버 접근 ( . ) : x.y 꼴에서 x의 멤버인 y에 접근하기 위해 사용
-배열 인자 접근 ( [] ) : x[y] 꼴에서 배열인 x의 인자 중 순번이 y인 인자에 접근하기 위해 사용
-객체화 ( new ) : new T 꼴에서 타입 T를 객체화하기 위해 사용
-매서드 호출 ( () ) : m()꼴에서 매서드 m을 호출하기 위해 사용
-우선 연산 ( () ) : (x)꼴에서 연산 x를 우선하기 위해 사용
-단항 형 변환 ( (T) ) : (T) x 꼴에서 x의 타입을 강제로 (명시적으로) T로 변환
-타입 비교 ( instanceof ) : x instanceof T 꼴에서 값 x가 타입 T로 형변환될 수 있는가의 여부

연산자의 우선순위
-연산자 사이에는 연산되는 우선순위가 있으며 아래는 숫자가 작을수록 우선순위가 높다는 의미(1번이 가장 높은 순위)
1. 우선 연산, 배열 인자 접근, 멤버 접근 ( ( ), [ ] , . )
2. 후위 증가, 후위 감소 ( ++, -- )
3. 전위 증가, 전위 감소, 단항 양수, 단항 음수, 논리 NOT ( ++, --, +, -, ! )
4. 객체화 (new)
5.. 곱하기, 나누기, 나머지 ( *, /, % )
6. 더하기, 빼기 ( +, - )
7. 초과, 미만, 이상, 이하, 타입 비교 ( <, >, <=, >=, instacnceof )
8.동등, 부등 ( ==, != )
9. 논리 AND ( && )
10. 논리 OR ( || )
11. 삼항 연산자 ( ? : )
12. 할당, 복합 대입 연산 ( =, +=, -=, *=, /=, %= )