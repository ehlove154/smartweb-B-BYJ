함수
-Function는 호출(Call, Invoke)가능한 대상
-함수는 반복적으로 여러곳에서 사용될 가능성이 높은 로직을 분리하기 위해 사용
-함수의 명령법은 카멜 케이스이고 주로 아래의 형태를 가지는 편
	*[동사]
	*[동사][목적어]
	*to[목적어]

-----------------------------------------------------------------------------

함수 호출
-함수는 종류를 구분하지 않고 아래와 같이 호출할 수 있다.
	[함수 이름]([전달 인자, ...]?);

	   *가령, parseInt 라는 이름을 가지는 함수에 전달인자 '314'를 전달하여 호출하는 표현은 아래와 같다.
	perseInt('314');

	   *마찬가지로, console의 멤버인 log 함수에 전달인자 'Hello World'를 전달하려 호출하는 표현은 아래와 같다.
	console.log('Hello World');

-----------------------------------------------------------------------------

일반 함수


기명 함수
function [함수 이름] ([매개 변수, ...]?) {
	[구현부]
}

   	   *가령, 전달 받은 매개 변수 a와 b의 합을 반환하기 위한 함수 sum은 아래와 같이 만들 수 있다.
	function sum (a, b) {
		return a + b;
	}
	   *return 키워드는 해당 함수의 호출 결과를 반환하기 위해 사용
	   *return 키워드는 해당 위치에서 해당 함수의 실행을 즉시 종료. 추가로, 반환값 없이 해당 함수의 실행을 고의로 종료하기 위해 return; 만 작성하기도 한다.
	   *반환값이 없는 함수의 경우 return 키워드를 작성하지 않기도 하는데, 이 때 함수의 호출 결과는 undefined이다.

익명 함수
function ([매개 변수, ...]) {
	[구현부]
}
	   *이름이 없는 함수로, 단독 사용이 불가능하며 주로 생성후 변수나 상수에 할당하거나, 다른 함수의 호출시 인자로 활용

-----------------------------------------------------------------------------

화살표 함수

[변수|상수 선언] = ([매개 변수, ...]?) => {
	[구현부]
};
	*화살표 함수는 다양한 변이가 존재하는데 이는 다음과 같다.
		-매개 변수가 하나만 존재하는 경우 : 매개 변수를 위한 괄호를 생략하여도 된다.
		-구현부가 하나의 구문으로 이루어지는 경우 : { }를 생략 가능. 이때 return 키워드도 생략