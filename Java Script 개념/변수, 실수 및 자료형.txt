변수

-변수(Variable)는 선언(declaration) 및 값 초기화(Initialization)이후 값이 변할 수 있는 것을 의미
-변수 선언시 별도의 자료형(타입)을 명시하지 않고, 명명법으로 카멜 케이스를 사용
-동일한 스코프(Scope)에서 사용중인 이름이나 약속된 키워드를 변수의 이름으로 사용할 수 없다.
-변수 선언시 값을 부여(Assign)하지 않으면 초기 값으로 undefined가 할당
-변수 선언
	let [변수 이름];
	    *위 처럼 값 초기화 없이 변수를 선언할 경우 그 값은 undefined로 초기화 된다.
-변수 선언 및 값 초기화
	let [변수 이름] = [값];

-----------------------------------------------------------------------------

상수

-Constant는 선언 및 값 초기화 이후 값이 변하지 않는 것을 의미
-상수 선언시 별도의 자료형(타입)을 명시하지 않고, 명명법으로 카멜 케이스를 사용
-동일한 스코프(Scope)에서 사용중인 이름이나 약속된 키워드를 상수의 이름으로 사용할 수 없다.
-상수는 선언시 값을 반드시 부여하여야 한다.
-상수 선언 및 값 초기화
	const [상수 이름] = [값];

-----------------------------------------------------------------------------

자료형


문자열
-문자열 자료형을 표현하기 위해서 ( ' ), ( " ), 백틱( ` )을 사용한다.
-백틱을 사용한 문자열은 표현식( ${} )을 활용하여 문자열 사이에 외부 변수나 상수를 삽입하기 쉽고, 개행을 위한 문자열 이어 붙이기가 필요 없어 편리
-HTML과의 연동이 많은 자바스크립트의 특성상 "를 많이 사용하는 HTML을 위하여 문자열 표현시 '를 많이 사용

숫자
-별도의 특수문자를 사용하지 않으며, js의 숫자는 정수와 실수를 별도로 구분하지 않는다.

논리값
-별도의 특수문자를 사용하지 않으며, true, false로 이루어져 있다.

널리쉬(Nullish)
-null과 undefined를 포함한다.
-null은 스텍 영역의 값이 힙 영역을 가리키고 있으나, 힙 영역이 비어있음을 의미
-undefined는 스텍 영역의 값이 비어있음을 의미
-typeof null은 object임에 유의
-typeof undefined는 undefined임에 유의
-어떠한 널리쉬 값에 대해 unll을 피연산자로 동등( == )비교시 true이 연산됨을 활용할 수 있다.
	*null == undefined는 true

-----------------------------------------------------------------------------

배열
-array 하나의 변수가 여러개의 값을 가질 수 있도록 하기위해 사용한다.
-배열의 작성 형태는 JSON(JavaScript Object Notation) Array의 형태와 같다.
-배열은 [ ] 로 인자(들)를 감싸고, 각 인자들은 , 로 구분
-배열이 가지는 인자는 순번(인덱스)을 가지고, 해당 순번은 반드시 0번부터 시작하며, 배열에 [ ] 인자 접근 연산자를 사용하여 각 인자에 접근할 수 있다.
	let [변수 이름] = [[인자, ...]];

	   *가령 'Apple', 'Banana', 'Orange'라는 세 개의 문자열을 인자로 가지는 fruits라는 배열은 아래와 같이 만들 수 있다.
	let fruits = ['Apple' , 'Banana' , 'Orange'];
	   *배열이 가지는 인자는 순번(인덱스)을 가지는데, 첫번째 인자인 'Apple'부터 0번이며, 차적으로 1씩 증가

	   *아래와 같이 배열에 인자 접근 연산자와 순번을 통해 각 인자에 접근할 수 있다.
	console.log(fruits[0]); // 'Apple'
	console.log(fruits[2]); // 'Orange'

	   *추가로, 인자 접근시 음수나 범위를 벗어난 값을 전달할 경우 undefined가 된다.
	console.log(fruits[-1]); // undefined
	console.log(fruits[3]); // undefined

객체 속성
-length : 배열이 가지고 있는 인자의 개수

객체 함수
-at(x) : 호출 대상인 배열이 가지고 있는 순번이 x 인 인자를 반환
-concat(x) : 호출 대상인 배열과 인자인 배열 x 를 이어 붙인 새로운 배열을 반환한다. 원본배열 변화X
-fill(...) 원본배열 변화O
	*fill(x) : 호출 대상인 배열이 가지고 있는 모든 인자를 x로 대체한다.
	*fill(x, f) : 호출 대상인 배열이 가지고 있는 모든 인자들 중 순번이 f 이상인 인자를 x로 대체한다.
	*fill(x, f, t) : 호출 대상인 배열이 가지고 있는 모든 인자들 중 순번이 f 이상이고 t미만인 인자를 x로 대체한다.
-includes(x) : 호출 대상인 배열이 가지고 있는 인자 중 그 값이 x와 일치하는 인자가 존재하는가의 여부를 반환
-indexOf(x) : 호출 대상인 배열이 가지고 있는 인자 중 그 값이 x와 일치하는 첫번째 인자의 인덱스를 반환. 그러한 인자가 없다면 -1을 반환
-lastIndexOf(x) : 호출 대상인 배열이 가지고 있는 인자 중 그 값이 x와 일치하는 마지막 인자의 인덱스를 반환. 그러한 인자가 없다면 -1을 반환
-join(...)
	*join( ) : 호출 대상인 배열이 가지고 있는 인자를 , 로 이어붙인 문자열을 반환
	*join(x) : 호출 대상인 배열이 가지고 있는 인자를 x로 이어붙인 문자열을 반환
-pop( ) : 호출 대상인 배열이 가지고 있는 인자 중 마지막 인자를 배열에서 제거하고 이를 반환한다.
-push(x) : 호출 대상인 배열의 끝에 새로운 인자 x를 추가하고 배열의 길이 (length)를 반환
-reverse( ) : 호출 대상인 배열이 가지고 있는 인자의 순서를 뒤집는다.
-shift( ) : 호출 대상인 배열이 가지고 있는 인자 중 첫번째 인자를 배열에서 제거하고 이를 반환
-slice(...)
	*slice( ) : 호출 대상인 배열이 가지고 있는 인자를 그대로 가지는 배열을 복사하여 반환
	*slice(f) : 호출 대상인 배열이 가지고 있는 인자 중 인덱스가 f 이상인 인자를 가지는 배열을 복사하여 반환
	*slice(f, t) : 호출 대상인 배열이 가지고 있는 인자 중 인덱스가 f 이상이고 t 미만인 인자를 가지는 배열을 복사하여 반환
-sort(...)
	*sort( ) : 호출 대상인 배열이 가지고 있는 인자 값을 문자열이라고 가정하고, 이때의 아스키(ASCII) 코드를 기준으로 오름차순 정렬하여 반환
	*sort(f) : 호출 대상인 배열이 가지고 있는 인자가 되는, 두 개의 매개 변수 a, b를 받는 함수 f에 대해, 정렬시 a가 선행해야 하는 경우 음수를, b가 선행해야 하는 경우 양수를, 동률일 경우 0을 반환하는 함수를 직접 작성하여 이에 대해 정렬 및 반환
-splice(...)
	*splice(i, d) : 호출 대상이 되는 배열이 가지고 있는 인자 중 그 순번이 i 인것부터 d개를 제거하여 반환
	*splice(i, d, ...v) : 호출 대상이 되는 배열이 가지고 있는 인자 중 그 순번이 i 인것부터 d개를 제거하여 반환하고, 가변인자 v의 첫번째 인자의 순번이 i가 될 수 있도록 추가한다.

-----------------------------------------------------------------------------

(주로 화살표 함수와 함께 사용하는) 객체 함수

-every(f(x?, i?, a?)) : 호출 대상이 되는 배열이 가지고 있는 모든 인자가 전달된 함수 f 의 전달 인자 x로 전달되었을 때 함수 f가 true을 반환하는가의 여부를 반환. 함수 호출시 전달되는 인자는 순서대로 아래와 같고 선택적으로 사용할 수 있다.
	*x : 순차적으로 반복할 호출 대상인 배열이 가지는 인자
	*i : 순차적으로 반복할 호출 대상인 배열이 가지는 인자의 순번
	*a : 호출 대상인 배열
-filter(f(x?, i?, a?)) : 호출 대상이 되는 배열이 가지고 있는 인자 중 함수 f의 전달 인자로 true을 반환하는 인자만을 인자로 가지는 새로운 배열을 반환. 이를 만족하는 인자가 없다면 빈 배열 ( [ ] )을 반환
-find(f(x?, i?, a?)) : 호출 대상이 되는 배열이 가지고 있는 인자 중 함수 f의 전달 인자로 true을 반환하는 첫번째 인자를 반환. 그러한 인자가 없다면 undefined를 반환
-findLast(f(x?, i?, a?)) : 호출 대상이 되는 배열이 가지고 있는 인자 중 함수 f의 전달 인자로 true을 반환하는 마지막 인자를 반환. 그러한 인자가 없다면 undefined를 반환
-findIndex(f(x?, i?, a?)) : 호출 대상이 되는 배열이 가지고 있는 인자 중 함수 f의 전달 인자로 true을 반환하는 첫번째 인자의 순번을 반환. 그러한 인자가 없다면 -1을 반환
-forEach(f(x?, i?, a?)) : 호출 대상이 되는 배열이 가지고 있는 인자 전체에 대해 함수 f의 전달 인자로 해당 함수를 단순 반복 실행
-some(f(x?, i?, a?)) : 호출 대상이 되는 배열이 가지고 있는 인자 중 하나라도 함수 f의 전달인자로 true을 반환하는가의 여부를 반환
-map(f(x?, i?, a?)) : 호출 대상이 되는 배열이 가지고 있는 각 인자에 대해 함수 f의 전달 인자로 반환되는 값으로 치환되는 인자를 각 인자로 가지는 새로운 배열을 반환한다.
-reduce(f(c?, x?, i?, a?), s?) : 호출 대상이 되는 배열이 가지고 있는 인자를 반복 누산하여 누산된 값을 반환
	*a : 반복하고 있는 누산기(Accumulator).
	*s : 반복할 누산기의 초기값

-----------------------------------------------------------------------------

오브젝트
-object는 키key와 값value으로 이루어진 쌍pair의 집합을 가지는 객체
-작성형태는 JSON(JavaScript Object Notation) Object의 형태와 같다
-{ } 로 각 쌍들을 감싸고, 키와 값은 : 으로 구분하며, 이러한 키와 값으로 이루어진 쌍들은 , 로 구분하여 하나의 오브젝트에 여러개의 쌍을 작성할 수 있다.
-오브젝트가 가지는 쌍들에는 순서가 없음으로 순번(인덱스)를 통한 접근이 불가능
-오브젝트의 쌍이 가지고 있는 값에는 키를 통해 접근할 수 있고, 하나의 오브젝트가 가지는 동일한 계층의 키는 고유해야 한다.
-오브젝트가 가지는 키는 반드시 문자열이어야 하고 값의 타입에는 제한이 없다.
-오브젝트의 선언은 아래와 같은 형태로 한다.
	let [이름] = {
		[키 1] : [값 1]
	};
	
	   *가령, 국가 코드별 한국어 이름을 가지는 오브젝트의 구조는 아래와 같이 작성할 수 있다.
	let countryMap = {
		KR : '대한민국' ,
		US : '미국' ,
		SE : '스웨덴' , 
		DE : '독일' ,
		UK : '영국'
	};
	   *키 이름을 통해 오브젝트가 가지는 값에 접근하기 위해서는 오브젝트에 [ ] 혹은 멤버 접근( . )연산자를 사용할 수 있다.
	console.log(countryMap.KR); // 대한민국
	console.log(countryMap['KR']); // 대한민국
	   *멤버 접근( . )을 통해 접근할 때에는 키 이름을 문자열로 취급하여서는 안된다.
	   *[ ]를 통해서 접근할 때에는 키 이름을 문자열로 취급하여야 한다.


쌍 추가 및 값 변경
-오브젝트에 이미 존재하는 쌍의 값을 변경하거나, 존재하지 않는 쌍을 추가하기 위해 아래와 같이 작성할 수 있다.
	[오브젝트] . [키] = [값];
	[오브젝트[[키 문자열]] = [값];

쌍 삭제
-존재 하는 쌍을 삭제하기 위해 아래와 같이 작성할 수 있다.
	delete [오브젝트] . [키];
	delete [오브젝트][[키 문자열]];

-----------------------------------------------------------------------------

정적 함수
-keys(x) : 전달받은 오브젝트 x가 가지는 키들을 인자로 가지는 1차원 배열을 반환한다.
-values(x) : 전달받은 오브젝트 x가 가지는 값들을 인자로 가지는 1차원 배열을 반환한다.