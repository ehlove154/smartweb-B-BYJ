선택자
-Selector는 하나 이상의 CSS 속성(Property)을 적용하기 위한 대상을 선택하기 위해 사용하는 표현식
-CSS의 속성을 적용하기 위해 아래와 같이 작성한다.
		선택자{
    			속성 이름1 : 값1;
    			속성 이름2 : 값2;
		}
	*선택자를 작성하고 중괄호({)를 열어 중괄호를 닫기(})전까지 속성을 여러개 작성할 수 있다.
	*속성은 속성이름을 작성하고 : 을 적은 뒤 값을 적고 ;으로 끝내야 한다. (속성이름 : 값;)

--------------------------------------------------

기본 선택자

전체 선택자
-(universal Selector)는 유형의 종류와 관계없이 모든 유형의 태그를 선택
- * 사용
		* {
	}
	-모든 요소를 선택한다.

-유형 선택자가 아닌 선택자를 사용하는 경우 전체 선택자가 생략된 것으로 간주
	.color-red {
	}	
	-위 선택자는 유형 선택자가 아님으로 실질적으로 아래와 같이 전체 선택자가 생략된 형태이다.
	*.color-red {
	}

-선택자를 복합하여 사용하되 유형 선택자가 없는 경우 전체 선택자가 생략된 것으로 간주
	[type="text" required] {
	}
	-위 선택자는 유형 선택자와 의사 클래스를 복합하여 사용한 선택자인데 유형 선택자가 없음으로 실질적으로 아래와 같이 전체 선택자가 생략된 것으로 간주한다.

유형 선택자
-유형 선택자(요소 선택자, Type Selector)는 태그의 이름으로 선택
-별도의 특수기호 없이 태그의 이름을 작성
-가령, 모든 span 태그를 선택하기 위해 아래와 같이 작성 할 수 있다.
	span{
	}

클래스 선택자
-class selector는 태그가 가지고 있는 class속성 값으로 선택
-마침표 특수기호( . )을 이용하여 .클래스 의 형태로 작성
-가령, color-red라는 클래스를 가지는 모든 요소를 선택하기 위해 아래와 같이 선택자를 작성한다.
	.color-red {
	}

아이디 선택자
-ID Selector 는 태그가 가지고 있는 id 속성 값으로 선택
-#을 이용하여 #아이디 의 형태로 작성
-가령 loginForm 이라는 id를 가지는 요소를 선택하기 위해 아래와 같이 선택자를 작성한다.
	#loginForm {
	}

특성 선택자
-속성 선택자 Attribute Selector 는 HTML 태그가 가지고 있는 속성 및 이의 값으로 선택
-[ ] 를 이용하여, 속성 및 값 관계 정의를 아래와 같이 할 수 있다.
	*[속성] : 속성 존재 확인
	*[속성=값] : 속성 값 일치 확인
	*[속성~=값] : 속성 값 포함 확인(구분자: 공백)
	*[속성^=값] : 속성 값 시작 확인
	*[속성$=값] : 속성 값 끝 확인
	*[속성*=값] : 속성 값 포함 확인

---------------------------------------------------------

그룹 선택자

선택자 목록
-한 번에 두 개 이상의 선택자를 선택하여 동일한 속성을 부여하기 위해 사용
-, 로 선택자를 구분
-가령 h1~h6 여섯 개의 유형 선택자에 동일한 속성을 한번에 부여하기 위해 아래와 같이 선택자 목록을 작성할 수 있다.
	h1, h2, h3, h4, h5, h6 {
	}

-----------------------------------------------------------

결합자
-결합자에 의해 속성을 적용받는 대상은 항상 마지막 피결합자임에 유의

자손 결합자
-기준이 되는 선택자가 가지는 자식 혹은 자손이 되는 선택자 전체를 택하기 위해 사용
-선택자 사이를 공백으로 구분
-가령, div의 자식 혹은 자손인 span을 선택하기 위해 아래와 같이 작성한다.
	div span {
	}

자식 결합자
-기준이 되는 선택자가 가지는 자식이 되는 선택자 전체를 선택하기 위해 사용
- > 사용
-가령, ul의 자식인 li 태그를 모두선택하기 위해 아래와 같이 작성한다.
	ul > li {
	}

일반 형제 결합자
-기준이 되는 선택자와 동일한 부모를 가지고 이보다 후행하는 요소들에 대한 선택자
- ~ 사용
-가령, .container 태그의 자식인 .box 의 일반 형제인 .box를 선택하기 위해 아래와 같이 선택지를 작성 할 수 있다.
	.container > .box ~ .box {
 	}

인접 형제 결합자
-기준이 되는 선택자와 동일한 부모를 가지고 이에 바로 후행하는 요소에 대한 선택자
- + 사용
-가령, .container 태그의 자식인 .box 의 인접 형제인 .box를 선택하기 위해 아래와 같이 선택지를 작성 할 수 있다.
	.container > .box + .box {
 	}

-----------------------------------------------------------------------

의사 클래스
-가상 클래스, Pseudo Class는 요소의 상태나 상황에 따라 선택자를 구분하기 위해 사용
-어떠한 사용자 뒤에 ; 과 의사 클래스 이름을 붙여 사용
-의사 클래스의 종류
	** :active : 활성(마우스를 누르고 있는) 상태
	** :hover : 마우스 커서가 올라가 있는 상태
	** :checked : input 태그의 type 속성 값이 checkbox 혹은 radio 일때 해당 태그가 체크되어 있는 상태
	* :disabled : 태그가 비활성화 되어 있는(disabled 속성이 있는) 상태. 단, 비활성화 가능한 태그만을 대상으로 한다.
	* :enabled : 태그가 활성화 되어 있는(disabled 속성이 없는) 상태. 단, 비활성화 가능한 태그만을 대상으로 한다.
	** :focus : 태그가 포커스를 가지고 있는 상태. 단, 포커스를 가질 수 있는 태그만을 대상으로 한다.
	** :focus-within : 자기 스스로 혹은 자식/자손 중 하나가 포커스를 가지고 있는 상태. 단, 포커스를 가질 수 있는 태그만을 대상으로 한다.
	** :not(:x) : 의사 클래스 x를 부정한 상태
	* :read-only : 태그가 읽기 전용(readonly 속성이 있는) 상태. 단, 입력 가능한 태그만을 대상으로 한다.
	* :read-write : 태그가 읽기 전용이 아닌(readonly 속성이 없는) 상태. 단, 입력 가능한 태그만을 대상으로 한다.
	* :required : 태그가 필수 필드인(required 속성이 있는) 상태. 단, 입력 가능한 태그만을 대상으로 한다.
	* :optional : 태그가 필수 필드가 아닌(required 속성이 없는) 상태. 단, 입력 가능한 태그만을 대상으로 한다.
	** :has(x) : 태그가 선택자x를 가지고 있는 상태.
	* :scope : 선행하는 선택자(혹은 변수)에 의해 선택되는 요소를 참조하기 위한 가상의 지점. CSS가 아닌 자바스크립트에서 사용하기 위해 존재.
	* :first-child : 위치한 곳에서 첫번째 자식이면서 선행 선택자를 만족하는 상태
	* :last-child : 위치한 곳에서 마지막 자식이면서 선행 선택자를 만족하는 상태
	* :nth-child(x) : 위치한 곳에서 주어진 x를 만족하는 자식이면서 선행 선택자를 만족하는 상태
	    -숫자: 순번을 의미하며 1부터 시작한다.
	    -식(n): 0부터 1씩 증가하는 n에 대해서 An+B에 대한 식. 가령 3n은 3의 배수이다.(0, 3, 6, 9, ...)
	    -even: 짝수번째를 의미한다. 
	    -odd: 홀수번째를 의미한다.
	* :first-of-type
	* :last-of-type 
	* :nth-of-type(x) 
	    -숫자: 순번을 의미하며 1부터 시작한다.
	    -식(n): 0부터 1씩 증가하는 n에 대해서 An+B에 대한 식. 가령 3n은 3의 배수이다.(0, 3, 6, 9, ...)
	    -even: 짝수번째를 의미한다. 
	    -odd: 홀수번째를 의미한다.

----------------------------------------------------------------

의사 요소
-Pseudo Element는 요소의 앞이나 뒤에 가상의 요소를 만들거나, 내용에 간단한 변화를 주기위해 사용한다.
-의사 요소는 어떠한 선택자 위에 :: 와 의사 요소 이름을 붙여 사용한다.
-의사 요소의 종류는 다음과 같다.
	* ::after : 선택한 요소의 맨 마지막 자식으로 의사요소를 생성한다.
	* ::before : 선택한 요소의 첫번째 자식으로 의사요소를 생성한다.
	* ::first-letter : 블록 컨테이너의 첫 글자에 대한 속성을 지정
	* ::first-line : 블록 컨테이너의 첫 줄에 대한 속성을 지정
	* ::selection : 선택한 텍스트에 대한 속성을 지정

-------------------------------------------------------------------

우선순위
-CSS에서 작성하는 선택자는 우선 순위를 가리기 위해 아래 명시된 조건에 따라 점수를 메기고, 점수가 높은 것이 가지는 속성이 적용을 받는다.
-선택자간에 겹치는 속성이 있을 경우 우선 순위가 높은 선택자의 속성이 적용. 겹치지 않는 속성은 우선 순위와 관계없이 적용
-점수가 동일 할 경우 보다 아래쪽에 작성 된 선택자가 우선 순위를 가진다.
-배점
	* !important: 키워드를 활용한 우선순위 부여(점수:10,000점, 무한대)
	* 인라인 속성을 통한 우선순위 부여(점수:1,000점) : 태그의 style 속성을 통해 스타일을 적용하여 우선순위를 높일 수 있다.
	* 아이디 선택자를 통한 우선순위 부여(점수:100점)
	* 클래스 선택자를 통한 우선순위 부여(점수:10점)
	* 의사 클래스를 통한 우선순위 부여(점수:10점) : 단, 부정(:not)은 제외
	* 유형 선택자를 통한 우선순위 부여(점수:1점)
	* 전체 선택자 (*)를 통한 우선순위 부여(점수:0점)
	* 부정 의사 클래스 (:not)(점수:0점)