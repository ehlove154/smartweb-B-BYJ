XHR
-XML HTTP Request 기술은 자바스크립트의 XMLHTTPRequest 객체를 통해 구현 할 수 있다. 흔히 AJAX(Asynchronous Javascript And XML)라고 부르기도 한다.
-페이지 새로고침 없이, 비동기적으로 서버에 요청을 보내고 응답을 받아오기 위해 사용
-외부 리소스를 불러옴에 있어 페이지를 다시 불러올 필요가 없기 때문에, 사용자 경험(UX, User Exprerience)에 긍정적인 영향을 줌으로 많이 사용하는 편이다.
-일반적으로 아래 구조와 같이 구현할 수 있다.
        const xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function () {
            if (xhr.readyState !== XMLHttpRequest.DONE) {
                return;
            }
            if (xhr.status < 200 || xhr.status >= 400) {
                [요청 실패 구현부]
                return;
            }
            [요청 성공 구현부]
        }
        xhr.open([요청 방식], [요청 주소]);
        xhr.send([요청 데이터]?);

------------------------------------------------------------------------------

-정적 속성
	*UNSENT : XMLHttpRequest 타입 객체의 readyState 속성이 가질 수 있는 값으로 0과 같고, XMLHttpRequest객체가 객체화된 후 아무런 동작을 하지 않은 조건 상태
	*OPENED : XMLHttpRequest 타입 객체의 readyState 속성이 가질 수 있는 값으로 1과 같고, open 함수 호출 후의 상태
	*HEADERS_RECEIVED : XMLHttpRequest 타입 객체의 readyState 속성이 가질 수 있는 값으로 2와 같고, 요청 방식과 요청 주소의 유효성 검증 및 요청에 대한 산태 코드와 응답 헤더가 반환된 상채, 단, 응답의 본문은 반환되지 않음
	*LOADING : XMLHttpRequest 타입 객체의 readyState 속성이 가질 수 있는 값으로 3과 같고, 응답의 본문을 다운로드(수신)하고 있는 상태
	*DONE : XMLHttpRequest 타입 객체의 readyState 속성이 가질 수 있는 값으로 4와 같고,  XMLHttpRequest객체를 통한 여부와 관계없이 종료되었음을 의미. (통신 성공 여부는 해당 객체가 가지는 status 속성 값을 참고 한다.)

------------------------------------------------------------------------------

-객체 속성
	*readyState : 해당 객체의 대기상태
	*responseText : 서버가 응답으로 전송한 문자열 데이터 본문
	*status : 해당 객체의 HTTP상태 코드이다. 동일 객체의 readyState 속성이 HEADERS_RECEIVED 이상일때 사용 가능
	    -200 : OK. 정상상태 (주로 200이상 300미만의 값을 정상 상태로 간주한다.)
	    -400 : Bad Request. 서버가 요구하고 있는 데이터를 클라이언트가 누락하였거나 그 데이터의 형태가 잘못되었음을 의미
	    -401 : Unauthorized. 비록 그 의미는 미승인이지만 실질적으로 미인증(Unauthenticated)으로 사용되며, 주로 익명의 클라이언트가 해당 리소스에 접근할 권한이 없을때 사용(로그임 요구)
	    -403 : Forbidden. 클라이언트가 해당 리소스에 접근할 권한이 없을때 사용된다. 401과의 차이는 403은 현재 서버가 클라이언트의 신원을 알고 있을때 사용하는 편이라는 점이 있다.
	    -404 : Not Found. 클라이언트가 요청한 리소스가 서버에 존재하지 않음을 의미
	    -405 : Method Not Allowed. 클라이언트가 요청한 리소스에 대한 주소(경로)는 존재하지만, 요청 방식이 허용되지 않음을 의미
	    -500 : Internal Server Error. 요청을 처리하는 도중 서버 내부에서 오류가 발생하였음을 의미

------------------------------------------------------------------------------

-객체 함수
	*open(n, u) : 요청을 보낼 준비를 하기 위해 호출. 요청을 보낼 방식 (Method)인 문자열을 n, 주소인 문자열을 u에 전달
	       -요청방식
		*GET : 일반적인 웹 브라우저의 주소창에 주소를 입력하고 요청을 보낼때 사용하는 방식. 데이터를 요청 주소에만 실어보낼 수 있고, 일반적인 웹 페이지에 대한 응답을 위한 요청이나, 데이터베이스 상에서 SELECT 쿼리가 발생하는 경우 사용하는 요청 방식
		*POST : 주로 데이터베이스 상에서 INSERT 쿼리가 발생하는 경우 사용하는 요청 방식. 단, SELECT만 발생하더라도 전송하는 데이터가 주소상에 노출되어서는 안 되는 경우, POST 방식을 사용하기도 한다.
		*DELETE : 주로 데이터베이스 상에서 DELETE 쿼리가 발생하는 경우 사용하는 요청 방식
		*PATCH : 주로 데이터베이스 상에서 UPDATE 쿼리가 발생하는 경우 사용하는 요청 방식. 해당 요청에 의해 레코드가 부분적으로 수정되는 경우 사용
		*PUT : 주로 데이터베이스 상에서 UPDATE 쿼리가 발생하는 경우 사용하는 요청 방식. 해당 요청에 의해 레코드가 전체가 수정되는 경우 사용
	*send(d) : 요청을 전송. 이때 d는 요청에 함께 보낼 데이터이며 (Request Body), 보낼 데이터가 없다면 생략 가능. 단, 요청 방식이 GET이라면 데이터를 함께 보낼 수 없다.
	*readystatechange : 객체의 readyState 속성 값이 변할때 마다 실행할 이벤트