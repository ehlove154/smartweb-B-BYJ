클래스
-서로 관련 있는 멤버(멤버 변수 및 메서드 등)의 집합
-명명법 : 파스칼 케이스
-클래스의 구조는 아래와 같다
	[접근 제한자] [abstract | final] class [클래스 이름] [extends 부모 클래스]? [implements 인터페이스, . . . ]? {
		[멤버. . .]
	}
	   *abstract : 해당 클래스를 추상 클래스로 지정. 해당 클래스가 추상 메서드를 한 개 이상 가지려면 반드시 추상 클래스로 지정되어야 한다.
	   *final : 해당 클래스를 최종 클래스로 지정. 해당 클래스는 상속 대상(부모)이 될 수 없다.
	   *extends : 상속 받을 클래스(상속 대상, 부모)를 지정.
	   *implements : 구현할 인터페이스(들)를 지정.

----------------------------------------------------------------------------------------

객체
-instance 객체화 연산(new)을 통해 참조 타입이 객체화된 대상을 의미

생성자
-constructor 어떠한 타입이 객체화될때 반드시 실행되는 일종의 특수한 메서드
-객체화 연산(new)시 타입 뒤에 적는 ( ) 는 생성자 호출
	String str = new String ("Hi"); // 생성자 호출
-생성자의 구조는 아래와 같다
	[접근 제한자] [클래스 이름] ([매개 변수, . . . ]) {
		[구현부]
	}
	   *생성자의 이름은 반드시 클래스의 이름과 일치
	   *생성자는 반환 타입을 가지지 않는다 (void를 명시하지도 않음)
	   *생성자는 추상적 (abstract) 이거나 최종적(final), 정적(static)일 수 없다.
	   * 객체화 연산 외에는 임의로 호출할 수 없다.
	   *생성자 구현부의 첫 구문은 반드시 부모 클래스의 생성자 호출(super(. . .))이거나 자신 클래스의 생성자 호출 (this(. . .))이어야 한다.

기본 생성자
-모든 클래스는 생성자를 반드시 가지며 별도의 생성자를 명시하지 않을 경우 기본 생성자가 생략된 상태로 존재
-기본 생성자의 구조는 아래와 같다.
	public [클래스 이름]() {
		super();
	}

----------------------------------------------------------------------------------------

상속
-Inheritance 어떠한 클래스가 다른 클래스로 하여금 다른 클래스의 기능을 그대로 물려받아 새로운 기능을 확장시키기 위해 사용
-어떠한 클래스에게 상속 받을 클래스를 명시하지 않을 경우 모든 클래스는 자동으로 Object(java.lang.Object) 클래스를 상속 받는다.
-상속 받을 클래스를 명시하는 것이 보다 상위 계층의 상속 클래스에 대한 기능 확장을 상실하는 것을 의미하지 않는다.
-다중 상속 관계는 허용되지 않으며 반드시 한 개의 클래스를 상속 받아야 한다.
-순환 상속 구조를 가질 수 없다.