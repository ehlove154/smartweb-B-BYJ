메서드
-method 클래스 혹은 인터페이스 등의 구성요소가 가지는 멤버중 하나이며, 호출(call, invoke) 가능한 동작 단위
-매서드 작성시 , 매서드의 이름에 따라 최소한의 역할만 하도록 로직을 작성하는 것이 중요
-명명법 : 카멜 케이스(V, V+O, be+Adj)
-매서드의 구조는 아래와 같다
	[접근 제한자] [abstract | final | static]? [반환 타입 | void] [매서드 이름] ([매개 변수, . . .]?) {
		[구현부]
	}
	   *abstract : 해당 매서드가 추상 메서드임을 의미
		-추상 메서드의 접근 제한자는 private 일 수 없다.
		-추상 메서드는 정적(static)일 수 없다.
		-추상 메서드는 구현부를 가지지 않아야 한다.
		-추후 해당 메서드를 멤버로 가지는 클래스를 상속 받거나 인터페이스를 구현하는 대상으로 하여금 해당 메서드의 구현부를 직접 구현하도록 한다.

	   *final : 해당 메서드가 최종적임을 의미
		-최종적인 메서드는 재정의(Override)할 수 없다.
		-죄종적인 메서드는 추상적(abstract)일 수 없다.
		-해당 매서드의 구현부는 절대적이고 앞으로 변하여서는 안되는 로직을 가지는 경우 최종적으로 만든다.

	   *static : 해당 매서드가 정적임을 의미. 정적인 메서드는 주로 유틸리티성을 가지며, 객체가 아닌 타입의 이름으로 접근할 수 있다.
		-정적인 메서드는 추상적(abstract)일 수 없다.
		-정적인 메서드는 재정의 대상이 아님으로 최종적(final)일 필요가 없다.
		-정적인 메서드는 이를 가지고 있는 타입이 객체화되지 않아도 프로그램이 실행될 때 그 존재가 메모리에 등록된다.

	   *void : 해당 매서드의 반환 값이 없음을 의미. 호출 결과로 어떠한 값도 반환(return)할 수 없다. (단, 메서드 종료를 위한 단순 return은 사용 가능)
		-반환 타입이 있는 경우 명시적으로 예외를 던지는(throw 하는) 경우를 제외하고 모든 경우의 수에서 값을 반환(return)하여야 한다.(일부 무한 루프 등 제외)

----------------------------------------------------------------

매개 변수

-Parameter 메서드가 요구하는 변수 구성
-해당 메서드를 호출할때 요구되는 매개변수에 대해 전달하는 값을 전달 인자(Argument)라고 한다.
-명명법 : 카멜케이스
-매개 변수의 구조는 아래와 같고, , 로 구분하여 여러개 작성할 수 있다.
	[final]? [타입] [이름]

가변 인자
-Variable Argument 실질적으로 배열이지만 호출자로 하여금 단순히 쉼표 ( , )로 구분하여 전달 인자를 쉽게 전달할수 있게하기 위해 사용
	[final]? [타입] . . .  [이름]
	   *위와 같이 타입 뒤에 . . . 를 붙여 이가 가변 인자임을 설정
-단, 매개 변수 구조상 가변 인자는 반드시 마지막에 위치하여야 한다.(일반 매개 변수와 구분할 수 없음으로)
	public static int sum(int first, int . . . nums) {
		. . .
	}
	   *위 구조는 가변 인자 nums가 마지막 매개 변수임으로 문제가 없다.


	public static int sum(int first, int . . . nums, boolean unsafe) {
		. . .
	}
	   *위 구조는 가변 인자 nums가 마지막 매개 변수가 아님으로 올바르지 않은 구조