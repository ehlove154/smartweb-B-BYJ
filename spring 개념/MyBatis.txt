MyBatis
-스프링 프레임워크에서 사용가능한 영속성 프레임워크(PF, Persistence Framework)중 하나
-DBCP(Database Connection Pool)를 통한 관리되는 연결(Managed Connection) 구현 및 구현부 자동 완성 등을 통해 성능을 향상시키고 개발을 용이하게 한다.
-기본적으로 Spring Boot Starter JDBC 의존성은 연결 관리를 위한 커넥션 풀로 히카리CP(Hikari Connection Pool)를 사용

--------------------------------------------------------

시작하기

>프로젝트 세팅
>>프로젝트 의존성 준비
-스프링 부트에서 MyBatis를 사용하기 위해 아래와 같은 의존성이 필요. (MariaDB의 예)
-spring-boot-starter-jdbc(org.springframework.boot) : 스프링 부트에서 JDBC를 활용하여 DBMS에 접속하고 통신하기 위해 요구되는 의존성
-mariadb-java-client (org.mariadb.jdbc) : MariaDB 드라이브 구현체. 다른 DBMS에 접속하여야 하는 경우 다른 의존성 사용
-mybatis-spring-boot-starter (org.mybatis.spring.boot) : 스프링 부트에서 MyBatis를 사용하기 위한 의존성.

>>데이터베이스 연결 정보 제공
-스프링 부트에서 데이터베이스에 접속하기 위한 정보를 프로젝트의 application.properties 파일에 작성하여야 한다. (MariaDB의 예)
-spring.datasource.driver-class-name : 데이터베이스에 접속하기 위한 드라이버 클래스의 Qualified Name. 가령, org.mariadb.jdbc.Driver. 다른 DBMS에 접속하여야 하는 경우 해당 드라이버 클래스의 Qualified Name을 입력한다.
-spring.databasesource.url : 데이터베이스에 접속하기 위한 프로토콜을 포함한 경로. 가령, jdbc:mariadb://loaclhost:33067/. DBMS의 종류나 상황에 따른 호스트와 포트를 다르게 작성한다.
-spring.datasource.username : 데이터베이스에 접속하기 위한 사용자 이름. 가령, root
-spring.datasource.password : 데이터베이스에 접속하기 위한 사용자 비밀번호. 가령, test1234

>>MyBatis Mapper XML 파일 경로 설정
-스프링 부트에서 인식하여야할 MyBatis Mapper XML 파일의 경로에 대한 정보를 프로젝트의 application.properties 파일에 작성하여야 한다.
-mybatis.mapper-location=classpath:/mappers/**/*.xml
-속성 값은 필요에 따라 변경하여도 되고, classpath는 프로젝트의 /src/main/resources/ 디렉토리를 의미(즉, 설정상의 디렉토리는 /src/main/resources/mapper/ 를 의미)

>IDE 설정
>>MyBatis Mapper XML 프리셋 준비
-쿼리를 작성할 MyBatis Mapper XML 파일을 아래 구조에 맞게 작성한다.

<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="[Mapper 인터페이스의 Quanlified Name]">

</mapper>
	* mapper 태그의 namespace 속성 값은 이 XML 파일이 연결 될 Mapper 인터페이스의 자바 Quanlified Name이다.
	* 위 방식으로 작성한 Mapper XML 파일은 프로젝트의 application.properties에서 설정한 mybatis.mapper-locations 의 속성 값에 맞는 위치에 저장되어야 한다.

>표현식
- #{ } : 쿼리에 변수나 리터럴 값을 대입할 때, 필요에 따라 ' 및 보안을 위한 이스케이핑을 적용하여 대입한다. 대부분의 값에 유효
- ${ } :  쿼리에 변수나 리터럴 값을 대입할 때, 별도의 조치 없이 그대로 쿼리에 적용. 대부분의 경우 보안상의 이유로 적절하지 못하며, 테이블의 이름이나 열의 이름을 직접 명시하고자 할때 제한적인 목적으로 사용. 보안 취약점이 될 수 있음으로 아주 신중하게 사용. 특히나. 값의 근원이 클라이언트가 전달해준 값일 경우 ${ } 표현식을 사용하는 일이 없도록 하여야 함

>태그
- <insert> : INSERT 쿼리를 담기 위해 사용
	* 속성
	    - id : 연결된 인터페이스의 연결될 메서드 이름과 일치
	    - userGeneratedKeys : 
	    - keyColumn : 
	    - keyProperty : 
	    - parameterType : 
- <select> :  SELECT 쿼리를 담기 위해 사용
	* 속성
	    - id : 연결된 인터페이스의 연결될 메서드 이름과 일치
	    - parameterType : 
	    - resultType : 해당 쿼리 실행 결과를 반환할 자바 타입의 Quaified Name을 지정. 연결된 인터페이스 메서드의 반환 타입과 일치
- <update> : UPDATE 쿼리를 담기 위해 사용
	* 속성
	    - id : 연결된 인터페이스의 연결될 메서드 이름과 일치
	    - parameterType : 
- <delete> : DELETE 쿼리를 담기 위해 사용
	* 속성
	    - id : 연결된 인터페이스의 연결될 메서드 이름과 일치
	    - parameterType : 

>동적 쿼리와 하부 태그
