Collection
-Collection<E> (java.util.Collection<E>) 인터페이스는 인자의 자열을 가지는 자료구조이다.
-객체 메서드
	* add<E e>: 호출 대상의 인자로 e를 추가한다.
	* addAll(Collection<? extends E> c) : 호출 대상의 인자로 c가 가지고 있는 모든 인자를 추가한다.
	* clear( ) : 호출 대상이 가지고 있는 모든 인자를 제거한다.
	* contains(Object o) : 호출 대상이 가지고 있는 인자들 중 전달 받은 객체 o에 대해 동등(==) 하거나 equals(. . .) 메서드의 호출 결과가 true인 인자가 있는가의 여부를 반환
	* remove(Object o) : 호출 대상이 가지고 있는 인자들 중 전달 받은 객체 o에 대해 동등(==) 하거나 equals(. . .) 메서드의 호출 결과가 true인 인자가 있다면 제거하고 ture를 반환. 그러한 인자가 없다면 false를 반환
	* containsAll(Collection<?> c) : 호출 대상이 전달 받은 c가 가지는 모든 인자에 대해 동등(==) 하거나 equals(. . .) 메서드의 호출 결과가 true인 인자들을 모두 가지고 있는가의 여부를 반환
	* size( ) : 호출대상이 가지고 있는 인자의 개수를 반환

-------------------------------------------------------------------------------------------------

List
-List<E> (java.util.List<E>) 인터페이스는 Collection<E> 인터페이스를 상속 받고, 순서가 있는 인자의 나열의 자료구조이다.
-객체 메서드
	* Collection<E>가 가지는 모든 객체 메서드
	* add(int i, E e) : 호출 대상의 인자로 e를 추가한다. 단, 추가하는 인자의 인덱스가 i가 되도록 한다. 기존에 순번이 i 였던 인자 및 후행하는 인자의 순번은 모두 1씩 뒤로 밀린다.
	* get(int i) : 호출 대상이 가지고 있는 인자 중 인덱스가 i 인 인자를 반환
	* indexOf(Object o) : 호출 대상이 가지고 있는 인자 중 o에 대해 동등(==)하거나  equals(. . .) 메서드의 호출 결과가 true인 첫번째 인자의 인덱스를 반환. 그러한 인자가 없다면 -1을 반환
	* lastIndexOf(Object o) : 호출 대상이 가지고 있는 인자 중 o에 대해 동등(==)하거나  equals(. . .) 메서드의 호출 결과가 true인 마지막 인자의 인덱스를 반환. 그러한 인자가 없다면 -1을 반환
	* remove(int i) : 호출 대상이 가지고 있는 인자 중 인덱스가 i 인 인자를 제거한다. 후행하는 인자의 순번은 모두 1씩 당겨진다.
	* set(int i, E e) : 호출 대상이 가지고 있는 인자 중 순번이 i 인 인자의 값을 e로 재할당한다.

★ArrayList
-ArrayList<E> (java.util.ArrayList<E>) 클래스는 List<E>인터페이스를 구현하는 자료구조 구현체이다.
-각 인자를 일반 배열처럼 관리하기 때문에 제공된 인덱스에 따른 인자 접근은 빠르지만, 인자 제거 및 추가 등 인자의 개수가 변하는 경우 속도가 느리다.
-인자의 추가 및 제거보다 조회 및 재할당이 더 빈번할 경우 사용이 권장된다.

★LinkedList
-LinkedList<E> (java.util.LinkedList<E>) 클래스는 List<E> 인터페이스를 구현하는 자료구조 구현체이다.
-각 인자의 존재를 인접한 인자로 하여금 기억하게 함으로써 각 인자를 관리한다. 이 때문에, 제공된 인덱스에 따른 인자 접근은 느리지만, 인자 제거 및 추가 등 인자의 개수가 변하는 경우 속도가 빠르다.
-인자의 조회 및 재할당보다 인자의 추가 및 제거가 더 빈번할 경우 사용이 권장된다.

Vector
-Vector<E> (java.util.Vector<E>) 클래스는 List<E>인터페이스를 구현하는 자료구조 구현체이다.
-역할과 내부 작동 방식은 ArrayList<E>와 동일하나, 이가 가진 메서드가 동기화(synchronized)되어 있다는 차이가 있다.

Stack
-Stack<E> (java.util.Stack<E>) 클래스는 Vector<E>클래스를 상속받는 자료구조이다.
-후입선출(LIFO, Last In First Out 혹은 FILO, First In Last Out) 방식으로 인자를 관리
-객체 메서드
	* Vector<E>가 가지는 모든 메서드
	* push(E e) : 호출 대상의 가장 위에 인자 e를 추가
	* pop ( ) : 호출 대상이 가지고 있는 인자 중 가장 위에 있는 인자를 제거하고 반환
	* peek ( ) : 호출 대상이 가지고 있는 인자 중 가장 위에 있는 인자를 반환

-------------------------------------------------------------------------------------------------

Set
-Set<E> (java.util.Set<E>) 인터페이스는 Collection<E> 인터페이스를 상속 받고, 순서가 없는 인자의 나열의 자료구조이다.
-객체 메서드
	* Collection<E>가 가지는 모든 객체 메서드
	* iterator( ) : Set 객체가 가진 인자를 반복할 수 있는 반복자(Iterator<E>)객체를 반환

HashSet
-HashSet<E>(java.util.HashSet<E>) 클래스는 Set<E> 인터페이스를 구현하는 자료구조 구현체
-인자에 순서가 없고, 인자인 객체의 해쉬 값(hashcode( ) 호출 결과)을 기준으로 동일 여부를 판단하여 보관
-해쉬 값(hashcode( ))이 중복되는 인자를 여러개 보관하지 않는다.

SortedSet
-SortedSet<E>(java.util.SortedSet<E>) 인터페이스는 Set<E>인터페이스를 상속받는 인자 정렬을 위한 자료구조

TreeSet
-TreeSet<E>(java.util.TreeSet<E>) 인터페이스는 SortedSet<E>인터페이스를 구현하는 자료구조
-인자를 정렬함에 있어 이진 탐색 트리(Binary Search Tree) 구조를 활용하여, 인자 검색과 정렬이 빠르다

-------------------------------------------------------------------------------------------------

Map
-Map<K, V>(java.util.Map<K, V>) 인터페이스는 키(K, Key)와 값(V, Value)으로 이루어진 쌍(Pair)들의 집합을 가지는 자료구조이다.
-객체 메서드
	* clear( ) : 호출 대상이 가지고 있는 쌍을 모두 제거한다.
	* containsKey(K k) : 호출 대상이 가지고 있는 쌍 중 키가 전달된 k와 같은 쌍이있는가의 여부를 반환
	* containsValue(V v) : 호출 대상이 가지고 있는 쌍 중 값이 전달된 v와 같은 쌍이있는가의 여부를 반환
	* entrySet( ) :  호출 대상이 가지고 있는 쌍들에 대한 Set<Map.Entry<K, V>>를 반환. 여기서 Map.Entry<K, V>는 쌍 하나를 의미, 아래 객체 메서드를 가진다.
		- getKey( ) : 키를 반환
		- getValue( ) : 값을 반환
		- setValue(V v) : 값을 v로 지정
	* get(K k) : 호출 대상이 가지고 있는 쌍 중 키가 전달된 k와 같은 쌍의 값을 반환, 그러한 쌍이 없다면 null을 반환
	* getOrDefault(K k, V v) : 호출 대상이 가지고 있는 쌍 중 키가 전달된 k 와 같은 쌍이 있다면 그 쌍의 값을, 없다면 v를 반환
	* keySet( ) : 호출 대상이 가지고 있는 쌍들의 키를 인자로 가지는 Set<K> 객체를 반환
	* put(K k, V v) : 호출 대상이 가지고 있는 쌍 중 k와 동일한 키를 가지는 쌍이 없다면, 키로 k를, 값으로 v를 가지는 쌍을 추가. 만약 이미 k와 동일한 키를 가지는 쌍이 있다면, 쌍의 값만 v`로 재할당
	* putIfAbsent(K k, V v) : 호출 대상이 가지고 있는 쌍 중 k와 동일한 키를 가지는 쌍이 없다면, 키로 k를, 값으로 v를 가지는 쌍을 추가. 만약 이미 k와 동일한 키를 가지는 쌍이 있다면, 아무런 동작도 하지 않는다.
	* replace(K k, V v) : 호출 대상이 가지고 있는 쌍 중 k와 동일한 키를 가지는 쌍이 없다면, 아무런 동작도 하지 않는다. 만약 이미 k와 동일한 키를 가지는 쌍이 있다면, 해당 쌍의 값을 v로 대체한다.
	* remove(K k) : 호출 대상이 가지고 있는 쌍 중 키가 k와 같은 쌍을 제거한다.
	* size ( ) : 호출 대상이 가지고 있는 쌍의 개수를 반환한다.
	* values( ) : 호출 대상이 가지고 있는 쌍들의 값을 인자로 가지는 Collection<E>객체를 반환

-------------------------------------------------------------------------------------------------

★HashMap
-HashMap<K, V> (java.util.HashMap<K, V>) 클래스는 Map<K, V> 인터페이스를 구현하는 자료구조 구현체이다.
-해당 자료구조에 추가하는 쌍의 순서는 보장되지 않는다.

LinkedHashMap
-LinkedHashMap<K, V> (java.util.LinkedHashMap<K, V>) 클래스는 HashMap<K, V>를 상속받는 자료구조 구현체이다.
-HashMap 자료구조가 쌍의 순서를 보장하지 않음에 비해, LinkedHashMap은 이가 가지는 쌍의 키가 이의 위치를 각 키로 하여금 기억하도록 하여, 쌍의 순서를 보장받는다는 차이가 있다.

-------------------------------------------------------------------------------------------------

HashTable
-HashTable<K, V> (java.util.HashTable<K, V>) 클래스는 Map<K, V> 인터페이스를 구현하는 자료구조 구현체이다.
-역할과 작동 방식은 HashMap<K, V>과 동일하나, 메서드가 동기화(Synchronized)되어 있다는 차이가 있다.

-------------------------------------------------------------------------------------------------

SortedMap
-HashMap<K, V> (java.util.SortedMap<K, V>) 클래스는 Map<K, V> 인터페이스를 상속 받는 쌍을 정렬하기 위한 자료구조. 단, 쌍을 정렬하기 위한 기준은 키( K )이다.
-쌍을 정렬하기 위한 인터페이스임으로, SortedMap 인터페이스를 상속받는 인터페이스 혹은 구현하는 클래스인 자료구조는 쌍의 순서를 보장받는다.

TreeMap
-TreeMap<K, V> (java.util.TreeMap<K, V>) 클래스는 SortedMap<K, V> 인터페이스를 구현하는 자료구조 구현체이다.
-쌍을 정렬함에 있어 이진 탐색 트리(Binary Search Tree)구조를 활용하여, 검색과 정렬이 빠르다.