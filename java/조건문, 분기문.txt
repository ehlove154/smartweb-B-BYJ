조건문


if
-주어진 조건이 true일때만 구현부를 실행하기 위해 사용한다.

	if ([조건]) {
		[구현부]
	}

else
-단독으로 사용할 수 없고 if문과 함께 사용하여야 한다.
-앞서 제시된 모든 조건이 false일때 최종적으로 실행할 구현부를 위해 사용한다.
-else문은 if문 하나에 여러개 존재할 수 없다.
-else문은 if문의 마지막 구문이어야 한다.
	
	if ([조건]) {
		[참 구현부]
	} else {
		[거짓 구현부]
	}
	   *위 예시에서 조건이참일때는 참 구현부를, 거짓일때는 거짓 구현부를 실행한다.
	   *조건이 논리임으로, 참 구현부 혹은 거짓 구현부 중 하나가 반드시 실행된다는 보장이 있다.

else if
-단독으로 사용할 수 없고 if문과 함께 사용하여야 한다.
-앞서 제시된 모든 조건이 false일때 부수적인 조건을 추가하여 해당 조건이 참일 때 구현부를 실행하기 위해 사용
-else if문은 if문 하나에 여러개 존재할 수 있다.
-else if문의 조건이 비록 참이라 하더라도 선행하는 if 혹은 else if의 조건이 참이라면 해당 후행하는 else if는 실행되지 않는다. (하나의 if문에서 실행될 수 있는 구현부는 하나 이하임으로)

	if ([선행 조건 1]) {
		[선행 조건 1 구현부]
	} else if ([선행 조건 2]) {
		[선행 조건 2 구현부]
	} else if ([선행 조건 3]) {
		[선행 조건 3 구현부]
	} else {
		[거짓 구현부]
	}
	   *위 예시에서 선행 조건 1이 참일 경우 선행 조건 1 구현부를 실행하고 나머지 else if와 else는 고려하지 않는다.
	   *위 예시에서 선행 조건 1이 거짓이고 선행 조건 2가 참인 경우 선행 조건 2 구현부를 실행하고 나머지 else if와 else는 고려하지 않는다.
	   *위 예시에서 선행 조건 1 및 선행 조건 2가 거짓이고 선행 조건 3이 참인 경우 선행 조건 3 구현부를 실행하고 후행하는 else는 고려하지 않는다.
	   *위 예시에서 선행 조건 1, 선행 조건 2, 선행 조건 3이 모두 거짓이라면 else를 실행한다.
	   *즉, else if의 개수 및 else의 존재 여부와 무관하게 하나의 if문에 존재하는 구현부는 실행되지 않거나, 단 한 개만 실행될 수 있다.

---------------------------------------------------------------------

분기문

switch
-분기대상 변수가 가지는 값에 따라 case를 활용하여 실행할 구문울 구분하기 위해 사용한다.

	switch ([분기 대상 변수]) {
		case [값 1]:
		   [값 1 구현부]
		   [break;]?
		case [값 2]:
		   [값 2 구현부]
		   [break;]?
		[default;]?
		   [default 구현부]?
	}
	   *case에 명시하는 값은 리터럴이거나 상수(final)여야 한다.
	   *case에 명시하는 값은 사칙연산일 수 있지만 메서드 호출일 수 없다.