배열
-하나의 변수로 동일하거나 호환되는(묵시적으로 형변환이 가능한) 타입의 값을 여러개 가질수 있도록 하기위해 사용
-비록 이가 가질 인자의 타입이 기초 타입이라 하더라도 메모리의 작동 방식은 참조 타입과 같다. 고로 null 값을 가질 수 있다.
-변수 선언시 타입에 [ ] 를 사용하여 해당 변수가 배열임을 나타냄
-배열의 이름은 주로 복수형으로 짓거나, 접미어로 Array를 붙여 짓는 편이다.

	T[ ] 이름;

	   *가령, 정수 int 배열인 nums는 아래와 같이 만들 수 있다.
	int[ ] nums;

--------------------------------------------------------------------

초기화
-배열의 초기화는 인자의 나열 혹은 배열의 길이 지정중 하나여야 한다.
-배열이 초기화 된 후에는 다시 초기화하는 방법 외에 배열이 가질 수 있는 인자의 개수를 줄이거나 늘릴 수 없다.
-배열이 가질 인자의 나열은 아래 방식으로 한다.
	T[ ] ts = new T[ ] {t1, t2, t3};

	   * 가령, 정수 int 배열에 대해 인자 1, 2, 3을 가지는 배열의 초기화는 아래와 같이 할 수 있다.
	int[ ] nums = new int[ ] {1, 2, 3};

	   *혹은 아래와 같이 문맥상 그 타입이 명확한 경우 객체화 연산자를 생략할 수 있다.
	int[ ] nums = {1, 2, 3};

-배열의 길이 지정은 아래 방식으로 한다
	T[ ] ts = new T[n];

	   * 가령, 정수 int 배열에 대해 길이가 3일 배열의 초기화는 아래와 같이 할 수 있다.
	int [ ] nums = new int[3];

	   * 길이 지정을 통해 초기화된 배열이 가지는 모든 인자는 기본 값으로 초기화되며 기본 값은 아래와 같다.
		-정수 및 실수 등 숫자 기초 타입: 0
		-문자 기초 타입 : \0
		-논리 기초 타입 : false
		-모든 참조 타입 : null

-인자의 나열과 배열의 길이 지정을 동시에 사용하여서는 안 된다.

	int[ ] nums = new int[3] {1, 2, 3};
	   *위와 같이 동시에 배열의 길이도 지정하고 (3), 인자도 나열({1, 2, 3}) 하여서는 안된다.

--------------------------------------------------------------------

인자
-배열은 배열이 가지는 각 인자에 대해 인덱스를 가지고 있는데, 이 인덱스는 반드시 0부터 시작하여 1씩 증가
-배열이 가지는 인자에 순번으로 접근하기 위해서는 배열 변수에 대해 [ ]를 사용할 수 있다.

	int[ ] odds = new int[ ]  {1, 3, 5, 7, 9};
	System.out.println(odds[1]);  // 3
	System.out.println(odds[3]);  // 7

-배열이 가지고 있는 인자에 값을 재할당하고자 할때 그 순번으로 접근하여 재할당할 수 있다.

	int[ ] odds = new int[ ]  {1, 3, 5, 7, 9};
	System.out.println(odds[2]);  // 5
	odds[2] = 11;
	System.out.println(odds[2]);  // 11

-배열이 가지고 있는 인자의 개수를 가지고 있는 속성은 length이다.

	int[ ] odds = new int[ ]  {1, 3, 5, 7, 9};
	System.out.println(odds.length);  // 5
	   *모든 인자를 가지는 배열의 length 속성 값에서 1을 뺸 값은 항상 마지막 인자의 순번이다.
	   *배열이 가지고 있는 인자의 인덱스의 범위를 벗어난 인자에 접근할 경우 ArrayIndexOutOFBoundsException 예외 Exception가 발생함으로 유의
-배열의 메모리 상태는 참조 타입과 같음으로 배열이 가지는 인자의 동등 여부를 비교할때에는 배열간에 동부등 비교를 하지 않도록 한다.
	int[ ] nums1 = new int[ ] {1, 2, 3};
	int[ ] nums2 = new int[ ] {1, 2, 3};
	System.out.println(nums1 == nums2);  // false

	   *대신, 두 배열의 길이가 같고 두 배열이 가지는 인자들이 서로 equals 메서드에 대해 true를 반환하는가의 여부를 반환하는 메서드 Arrays의 equals를 활용하도록 한다.
	int[ ] nums1 = new int[ ] {1, 2, 3};
	int[ ] nums2 = new int[ ] {1, 2, 3};
	System.out.println(Arrays.equals(nums1 == nums2));  // true