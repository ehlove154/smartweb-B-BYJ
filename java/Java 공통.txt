공통

서론
-자바(Java) 언어는 컴파일시 바이트 코드가 되는 언어로, 개발자가 작성한 코드가 바이트 코드로 컴파일 되어 운영체제 커널(Kernel)이 이를 직접 읽어들이지 않고, JRE(Java Runtime Environment)가 해당 바이트 코드를 읽어들이고 결과인 바이너리 코드를 운영체제 커널이 이해할 수 있는 형태로 전달하는 방식을 채택
-이러한 방식때문에 각 운영체제에 맞는 JRE가 적절하게 구축되어 있다면 하나의 코드로 운영체제와 무관하게 개발 및 실행할 수 있다는 장점이 있지만 컴파일 결과가 즉시 바이너리 코드로 변환되는 언어에 비해 속도가 느리다는 단점이 있다.

------------------------------------------------------------------------------------

JRE
-Java Runtime Environment 자바로 작성된 프로그램을 실행하기 위해 필요한 구성요소의 집합인 소프트웨어

------------------------------------------------------------------------------------

JDK
-Java Development Kit 자바로 프로그램을 개발하고 실행하기 위한 구성요소의 집합인 소프트웨어. 이는 JRE를 포함하고 있다.

------------------------------------------------------------------------------------

JVM
-Java Virtural Machine 자바로 개발된 프로그램을 실행하기 위해 구축된 가상의 환경
-JRE 설치 후 실제로 자바로 작성된 프로그램을 구동하여 바이너리 코드로 변환하는 실행 환경

------------------------------------------------------------------------------------

정적
-자바에서 정적(static)인 리소스는 프로그램이 실행되는 순간 main 메서드가 실행되기 전 모두 선언된다.
-반대로 비정적(Non-static)인 리소스는 해당 리소스를 포함하는 구성요소가 객체화될 때 혹은 메서드가 실행될 때 선언된다.
-따라서, 비정적인 대상이 정적인 대상에 접근하는 것은 항상 허용되지만, 정적인 대상이 비정적인 대상에 접근하는 것은 경우에 따라 허용되지 않을 수 있다. (객체화의 순서에 의거)

------------------------------------------------------------------------------------

패키지
-Package 동일한 이름을 가지는 클래스(동의 구성요소)가 동일한 경로에 존재할수 없는 문제를 해결하기 위해 존재하는 디렉토리
-주로 구성요소를 종류별, 목적별로 구분하여 위치시키기 위해 사용
-루트 패키지(Root Package)의 경로는 [소유하고 있는 도메인의 역순].[아티팩트 ID] 형식으로 구성 (ex) com.naver + cafe)

------------------------------------------------------------------------------------

캡슐화
-Encapsulation 주로 엔티티(Entity) 클래스, 각 객체(VO, Value Object), 데이터 전달 객체(Data Transfer Object)등이 가지는 멤버 변수의 외부 접근을 차단하고, 필요에 따라 해당 멤버 변수를 반환해주기 위한 게터(Getter) 및 새로운 값을 할당하고 해당 값에 대한 논리흫 작성하기 위한 세터(Setter) 메서드를 별도로 구현하는 방법을 의미

------------------------------------------------------------------------------------

접근 제한자
-특정 멤버에 접근할 수 있는 대상을 제한하기 위해 사용
-public : 제한 없음
-protected : 동일한 패키지 경로에 있거나 상속 관계에 있는 대상만 접근 가능
-(default) : 동일한 패키지 경로에 있는 대상만 접근 가능
-private : 동일한 클래스 내에서만 접근 가능3

------------------------------------------------------------------------------------

다형성
-Polymorphism 어떠한 타입을 가지는 객체가 다른 타입으로 변할 수 있는 성질을 의미
-클래스간의 상속 관계
	* 자식 객체는 부모 타입에 묵시적 형변환을 통해 할당될 수 있다.
	* 부모 객체는 자식 타입에 묵시적 형변환을 통해 할당될 수 없다.

-클래스와 인터페이스의 구현 관계
	* 특정 인터페이스를 구현하는 클래스 객체는 인터페이스 타입에 할당될 수 있다.